AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ProjectName:
    Type: String
  ProjectDeploymentName:
    Type: String
  ProjectVersion:
    Type: String

Resources:

  ##########################
  # Networking
  ##########################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.4.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIP
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatPublicIP.AllocationId

  NatPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ##########################
  # Opsworks Stacks
  ##########################

  ec2Role:
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Opswork EC2 role to download artif and register to stack
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: S3Permission
                Effect: Allow
                Action:
                  - s3:GetObject*
                  - opsworks:RegisterInstance
                  - opsworks:DeregisterInstance
                  - opsworks:DescribeInstances
                Resource: "*"
            Version: '2012-10-17'
          PolicyName: s3Policy
    Type: AWS::IAM::Role
  
  InstanceProfile:
    Properties:
      Roles:
      - !Ref ec2Role
    Type: AWS::IAM::InstanceProfile

  ServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - opsworks.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Opswork service role
      Policies:
        - PolicyName: opsworkServicePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:GetMetricStatistics
                  - ec2:*
                  - ecs:*
                  - elasticloadbalancing:*
                  - iam:PassRole
                  - iam:GetRolePolicy
                  - iam:ListInstanceProfiles
                  - iam:ListRoles
                  - iam:ListUsers
                  - rds:*
                Resource: "*"
    Type: AWS::IAM::Role

  OpsworkStack:
    Properties:
      DefaultInstanceProfileArn: !GetAtt InstanceProfile.Arn
      DefaultSubnetId: !Ref PublicSubnet1
      Name: !Ref ProjectName
      ServiceRoleArn: !GetAtt ServiceRole.Arn
      VpcId: !Ref VPC
      DefaultOs: Amazon Linux 2
      ConfigurationManager:
        Name: Chef
        Version: 12
      UseCustomCookbooks: True
      CustomCookbooksSource:
        Type: git
        Url: https://github.com/goblin23/chef-spring-boot
    Type: AWS::OpsWorks::Stack

  OpsWorksLayer:
    Properties:
      AutoAssignElasticIps: true
      AutoAssignPublicIps: true
      EnableAutoHealing: false
      Name: !Ref ProjectName
      Shortname: !Ref ProjectName
      CustomSecurityGroupIds:
        - !GetAtt OpsWorksInstanceSecurityGroup.GroupId
      CustomRecipes:
        Deploy:
          - spring_boot_web_app::install
      StackId: !Ref OpsworkStack
      Type: custom
    Type: AWS::OpsWorks::Layer

  OpsWorksApp:
    Properties:
      Name: !Ref ProjectName
      AppSource:
        Type: s3
        Url: !Sub https://${ProjectDeploymentName}.s3.${AWS::Region}.amazonaws.com/${ProjectVersion}/app.jar
      StackId: !Ref OpsworkStack
      Type: other
    Type: AWS::OpsWorks::App

  OpsWorksInstance:
    Properties:
      InstanceType: t2.medium
      SshKeyName: k2
      RootDeviceType: ebs
      LayerIds: [ !Ref OpsWorksLayer ]
      StackId: !Ref OpsworkStack
      VirtualizationType: hvm
    Type: AWS::OpsWorks::Instance

  OpsWorksInstanceSecurityGroup:
    Properties:
      GroupDescription: Allows access to EC2 from Internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
    Type: AWS::EC2::SecurityGroup
